(function() {
  var BreakPointPane, ConsolePane, LeftSidePane, RightSidePane, StepButton, breakpointPanel, callstackPaneModule, cancelButton, consolePaneModule, dragHandler, h, hg, logger, stepButton;

  hg = require('mercury');

  h = hg.h;

  stepButton = require('./StepButton');

  breakpointPanel = require('./BreakPointPane');

  callstackPaneModule = require('./CallStackPane');

  consolePaneModule = require('./ConsolePane');

  cancelButton = require('./CancelButton');

  dragHandler = require('./drag-handler');

  logger = require('../logger');

  StepButton = null;

  BreakPointPane = null;

  ConsolePane = null;

  LeftSidePane = function(ConsolePane, state) {
    return h('div', {
      style: {
        display: 'flex',
        flex: 'auto',
        flexDirection: 'column'
      }
    }, [ConsolePane.render(state.logger)]);
  };

  RightSidePane = function(BreakPointPane, CallStackPane, LocalsPane, WatchPane, StepButton, state) {
    return h('div', {
      style: {
        display: 'flex',
        flex: 1,
        width: (state.collapsed ? 0 : state.sideWidth) + "px",
        flexDirection: 'row'
      }
    }, [
      h('div.inset-panel', {
        style: {
          flexDirection: 'column',
          display: 'flex',
          flex: 'auto'
        }
      }, [
        h('div.debugger-panel-heading', {
          style: {
            'flex-shrink': 0
          }
        }, [h('div.btn-group', {}, [StepButton.render(state.steps.stepContinue), StepButton.render(state.steps.stepNext), StepButton.render(state.steps.stepIn), StepButton.render(state.steps.stepOut), cancelButton.render(state.cancel)])]), h('div.panel-body', {
          style: {
            flex: 'auto',
            display: 'list-item',
            overflow: 'auto'
          }
        }, [
          h('div.scroll-view', {
            style: {
              'height': '100vh'
            }
          }, [BreakPointPane.render(state.breakpoints), CallStackPane.render(state.callstack), LocalsPane.render(state.locals), WatchPane.render(state.watch)])
        ])
      ])
    ]);
  };

  exports.startBottom = function(root, _debugger) {
    var App, app, changeHeight, toggleCollapsed;
    ConsolePane = consolePaneModule.create(_debugger);
    changeHeight = function(state, data) {
      return state.height.set(data.height);
    };
    toggleCollapsed = function(state, data) {
      return state.collapsed.set(!state.collapsed());
    };
    App = function() {
      var define;
      define = {
        height: hg.value(350),
        collapsed: hg.value(false),
        channels: {
          changeHeight: changeHeight,
          toggleCollapsed: toggleCollapsed
        },
        logger: ConsolePane()
      };
      return hg.state(define);
    };
    App.render = function(state) {
      return h('div', {
        style: {
          display: 'flex',
          flex: 'auto',
          flexDirection: 'column',
          position: 'relative',
          height: (state.collapsed ? 10 : state.height) + "px"
        }
      }, [
        h('div.resizer', {
          style: {
            cursor: state.collapsed ? '' : 'ns-resize',
            display: 'flex',
            'flex-direction': 'column'
          },
          'ev-mousedown': !state.collapsed ? dragHandler(state.channels.changeHeight, {}) : void 0
        }, [
          h('div', {
            style: {
              'align-self': 'center',
              cursor: 'pointer',
              'margin-top': '-4px',
              'margin-bottom': '-2px'
            },
            'ev-click': hg.send(state.channels.toggleCollapsed),
            className: state.collapsed ? 'icon-triangle-up' : 'icon-triangle-down'
          }, [])
        ]), h('div', {
          style: {
            display: 'flex',
            flex: 'auto',
            flexDirection: 'row'
          }
        }, [LeftSidePane(ConsolePane, state)])
      ]);
    };
    app = App();
    hg.app(root, app, App.render);
    return app;
  };

  exports.startRight = function(root, _debugger) {
    var App, CallStackPane, LocalsPane, WatchPane, app, changeWidth, ref, toggleCollapsed;
    StepButton = stepButton.StepButton(_debugger);
    BreakPointPane = breakpointPanel.create(_debugger);
    ref = callstackPaneModule.create(_debugger), CallStackPane = ref.CallStackPane, LocalsPane = ref.LocalsPane, WatchPane = ref.WatchPane;
    changeWidth = function(state, data) {
      return state.sideWidth.set(data.sideWidth);
    };
    toggleCollapsed = function(state, data) {
      return state.collapsed.set(!state.collapsed());
    };
    App = function() {
      var define, stepContinue, stepIn, stepNext, stepOut;
      stepContinue = StepButton('continue', 'continue');
      stepIn = StepButton('step in', 'in');
      stepOut = StepButton('step out', 'out');
      stepNext = StepButton('step next', 'next');
      define = {
        sideWidth: hg.value(400),
        collapsed: hg.value(false),
        channels: {
          changeWidth: changeWidth,
          toggleCollapsed: toggleCollapsed
        },
        steps: {
          stepIn: stepIn,
          stepOut: stepOut,
          stepNext: stepNext,
          stepContinue: stepContinue
        },
        breakpoints: BreakPointPane(),
        callstack: CallStackPane(),
        watch: WatchPane(),
        locals: LocalsPane(),
        cancel: cancelButton.create(_debugger)
      };
      return hg.state(define);
    };
    App.render = function(state) {
      return h('div', {
        style: {
          display: 'flex',
          flexDirection: 'row',
          'justify-content': 'center'
        }
      }, [
        h('div.resizer', {
          style: {
            display: 'flex',
            cursor: state.collapsed ? '' : 'ew-resize'
          },
          'ev-mousedown': !state.collapsed ? dragHandler(state.channels.changeWidth, {}) : void 0
        }, [
          h('div', {
            style: {
              'align-self': 'center',
              cursor: 'pointer',
              'margin-left': '0px',
              'margin-right': '-4px'
            },
            'ev-click': hg.send(state.channels.toggleCollapsed),
            className: state.collapsed ? 'icon-triangle-left' : 'icon-triangle-right'
          }, [])
        ]), RightSidePane(BreakPointPane, CallStackPane, LocalsPane, WatchPane, StepButton, state)
      ]);
    };
    app = App();
    hg.app(root, app, App.render);
    return app;
  };

  exports.stop = function() {
    BreakPointPane.cleanup();
    callstackPaneModule.cleanup();
    return ConsolePane.cleanup();
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
